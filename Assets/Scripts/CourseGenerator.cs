using UnityEngine;

public class CourseGenerator : MonoBehaviour
{
    [Header("Prefab Arrays")]
    public GameObject[] TeeBlocks;    // Array of Tee block prefabs
    public GameObject[] MiddleBlocks; // Array of Middle block prefabs
    public GameObject[] HoleBlocks;   // Array of Hole block prefabs

    [Header("Course Settings")]
    public Transform StartObject;     // Object where the course generation begins
    public int ParType = 3;           // Par type for the course (e.g., Par 3, 4, 5)
    public bool randomizeParType = false; // Checkbox to randomize the ParType
    public int minParType = 3;        // Minimum value for ParType
    public int maxParType = 5;        // Maximum value for ParType
    private Vector3 currentPosition;  // Tracks the current position for placing blocks

    [Header("Manual Offset Settings")]
    public float blockSize = 15f;     // Base size of each block (adjust this if needed)
    public float manualOffset = 1f;   // Manual offset between blocks to adjust gap

    private GameObject[] generatedBlocks;  // Array to keep track of generated blocks for clearing

    void Start()
    {
        Debug.Log("CourseGenerator script started.");

        // Generate the course on start
        GenerateCourse();
    }

    void Update()
    {
        // Regenerate the course when the "R" key is pressed
        if (Input.GetKeyDown(KeyCode.R))
        {
            // Randomize ParType if enabled
            if (randomizeParType)
            {
                // Ensure that minParType is less than maxParType
                if (minParType >= maxParType)
                {
                    Debug.LogError("minParType should be less than maxParType.");
                    return;
                }

                ParType = Random.Range(minParType, maxParType + 1);  // Randomize ParType between minParType and maxParType
                Debug.Log($"Randomized ParType: {ParType}");
            }

            // Regenerate the course
            GenerateCourse();  // Regenerate the course
            Debug.Log("Course regenerated by pressing 'R'.");
        }
    }

    public void GenerateCourse()
    {
        // Clear the previous course first
        ClearCourse();

        Debug.Log($"Generating course at {StartObject.position}");

        // Place the Tee Block
        currentPosition = StartObject.position;  // Set starting position to StartObject
        Debug.Log($"Placing Tee block at {currentPosition}");
        generatedBlocks = new GameObject[TeeBlocks.Length + (ParType - 2) + 1]; // Allocate space for all blocks

        generatedBlocks[0] = Instantiate(TeeBlocks[0], currentPosition, Quaternion.identity);

        // Generate Middle Blocks
        int index = 1; // Start placing middle blocks after the tee block
        for (int i = 0; i < ParType - 2; i++) // Subtract 2 for Tee and Hole
        {
            currentPosition += Vector3.forward * blockSize + Vector3.forward * manualOffset; // Add offset to avoid overlap
            Debug.Log($"Placing middle block at {currentPosition}");

            if (MiddleBlocks.Length > 0)
            {
                generatedBlocks[index] = Instantiate(MiddleBlocks[Random.Range(0, MiddleBlocks.Length)], currentPosition, Quaternion.identity);
            }
            else
            {
                Debug.LogError("No MiddleBlocks found! Assign at least one prefab to the MiddleBlocks array.");
                return;
            }
            index++;
        }

        // Generate Hole Block
        currentPosition += Vector3.forward * blockSize + Vector3.forward * manualOffset; // Add offset to the last block
        Debug.Log($"Placing hole block at {currentPosition}");

        if (HoleBlocks.Length > 0)
        {
            generatedBlocks[index] = Instantiate(HoleBlocks[0], currentPosition, Quaternion.identity);
        }
        else
        {
            Debug.LogError("No HoleBlocks found! Assign at least one prefab to the HoleBlocks array.");
            return;
        }

        Debug.Log("Course generation complete.");
    }

    public void ClearCourse()
    {
        Debug.Log("Clearing previous course...");
        if (generatedBlocks != null)
        {
            foreach (var block in generatedBlocks)
            {
                if (block != null)
                {
                    Destroy(block);
                    Debug.Log($"Destroyed block: {block.name}");
                }
            }
        }
        Debug.Log("Course cleared.");
    }
}
